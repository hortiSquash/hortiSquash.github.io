@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Inter&display=swap');
@font-face {
    font-family: WarframeIcons;
    src: url(WarframeIcons.woff) format('woff');
}

@font-face {
    font-family: Info_Source;
    src: url(info_source.woff2) format('woff2');
}

body {
    font-family: Roboto, Arial, sans-serif, WarframeIcons, Info_Source;
    background-color: var(--color-body-background);
    color: var(--color-text);
}

:root {
    --mod-width: clamp(160px, calc((100vw - 2 * var(--mod-margin-horizontal)) / 2), 240px);
    --mod-height: 120px;
    --buff-count: 3;
    --mod-margin-horizontal: 5px;
    --mod-margin-vertical: 5px;
    --mod-gap: calc(2 * var(--mod-margin-vertical)) calc(2 * var(--mod-margin-horizontal));

    --unit-size: 0.8rem;

    /* TODO colors */
    --color-text: black;
    --color-background: #ddd;
    --color-body-background: #ddd;
    --color-borders: #bbb;
    --border-style: 2px solid var(--color-borders);
    --box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.2);

    --color-input-text: black;
    --color-input-background: white;
    --color-input-text-placeholder: grey;
    --color-button-text: black;
    --color-button-background: white;
    --color-mod-background: #c6c6c6;
    --color-weapon-background: rgba(0, 0, 0, 0.1);
    --color-indented: color-mix(in srgb, var(--color-text) 50%, white);
    --color-hovered: #5a86d5;
    --color-modbuff: green;
    --color-modnerf: red;
    --mod-empty-background-filter: invert() opacity(30%);
    --color-mod-empty-background: rgba(0, 0, 0, 0.7);
    --color-hits-background: white;
    --color-plot-background: lightgray;

    --color-TR-even: rgba(0, 0, 0, 0.05);
    --color-TR-header: #b1b1b1;

    --color-tooltip: grey;
    --color-tooltip-background: rgba(0, 0, 0, 0.7);
    --color-tooltip-text: white;
}

body[theme="1"] {
    /* TODO dark theme colors */
    --color-text: #ddd;
    --color-background: #202024;
    --color-body-background: #121214;
    --color-borders: #606060;
    --border-style: 2px solid var(--color-borders);
    --box-shadow: 0 2px 12px 0 rgba(255, 255, 255, 0.2);

    --color-input-text: black;
    --color-input-background: #606060;
    --color-input-text-placeholder: grey;
    --color-button-text: black;
    --color-button-background: white;
    --color-mod-background: #3c3c3c;
    --color-weapon-background: rgba(0, 0, 0, 0.1);
    --color-indented: color-mix(in srgb, var(--color-text) 70%, black);
    --color-hovered: #69b5fb;
    --color-modbuff: #62c162;
    --color-modnerf: #f63939;
    --mod-empty-background-filter: opacity(30%);
    --color-mod-empty-background: rgba(255, 255, 255, 0.7);
    --color-hits-background: #5b5c5c;
    --color-plot-background: #333;

    --color-TR-even: rgba(0, 0, 0, 0.05);
    --color-TR-header: #606060;

    --color-tooltip: #bbb;
    --color-tooltip-background: rgba(0, 0, 0, 0.7);
    --color-tooltip-text: white;
}

body[theme="2"] {
    /* TODO Vitruvian theme colors */
    --color-text: #9c8a57;
    --color-background: #19161b;
    --color-body-background: #0b0b16;
    --color-borders: #5c4f34;
    --border-style: 2px solid var(--color-borders);
    --box-shadow: 0 2px 12px 0 rgba(92, 79, 52, 0.3);

    --color-input-text: black;
    --color-input-background: #14131b;
    --color-input-text-placeholder: grey;
    --color-button-text: black;
    --color-button-background: white;
    --color-mod-background: #3c3c3c;
    --color-weapon-background: rgba(0, 0, 0, 0.1);
    --color-indented: color-mix(in srgb, var(--color-text) 70%, black);
    --color-hovered: #f5e3ad;
    --color-modbuff: #3c9309;
    --color-modnerf: #db1f1f;
    --mod-empty-background-filter: opacity(30%);
    --color-mod-empty-background: rgba(255, 255, 255, 0.7);
    --color-hits-background: #5b5c5c;
    --color-plot-background: #333;

    --color-TR-even: #22212a;
    --color-TR-header: #606060;

    --color-tooltip: #bbb;
    --color-tooltip-background: rgba(0, 0, 0, 0.7);
    --color-tooltip-text: white;
}

{
    color: #330033;
    color: #34192B;
    color: #343019;
    color: #193430;
    color: #231934;
}

#grid > * {
    border-radius: 15px;
    box-shadow: var(--box-shadow);
    background-color: var(--color-background);
}

#extra-parameters {
    width: max-content;
    margin: 0px;
    padding: 10px;
    border: var(--border-style);
    border-radius: 15px;
    box-shadow: var(--box-shadow);

    grid-row: span 2;

    display: grid;
    grid-auto-rows: auto;
    grid-template-columns: max-content;
    gap: 5px;
}

fieldset > legend {
    pointer-events: none;
    user-select: none;
}

dialog {
    color: inherit;
    background-color: var(--color-background);
    border-color: var(--color-borders);
    border-radius: 15px;
}

button {
    color: var(--color-button-text);
    /*
    border-radius: 5px;
    border: 1px solid #8f8f9d;
    background-color: #e9e9ed;
    padding: 2px 5px;

    &:hover {
        background-color: #d0d0d7;
        border-color: #676774;
    }
    */
}

select {
    /* color: var(--color-button-text); */
    /* background-color: black; */

    &:disabled {
        /* TODO */
    }
}

input {
    /* TODO it looks like shit with borders (default browser shit)
        background-color: var(--color-input-background); */
    /* color: var(--color-input-text); */

    &::placeholder {
        color: var(--color-input-text-placeholder);
    }

    &:disabled {
        /* TODO */
    }
}

input[type="checkbox"] {
    --width: 2rem;
    --height: 1rem;
    --border-width: 0.1rem;

    border-radius: 1rem; /* */
    background: #aaa;
    transform: translateY(25%);

    appearance: none;
    position: relative;
    cursor: pointer;
    width: var(--width);
    height: var(--height);

    &:checked {
        background: cornflowerblue;

        &::before {
            left: calc(var(--width) - var(--height) + var(--border-width));
        }
    }

    &::before {
        content: "";
        position: absolute;
        top: 50%;
        border-radius: 50%;
        transform: translateY(-50%);
        box-sizing: border-box; /* if you wanna add a border */
        width: calc(var(--height) - var(--border-width) * 2);
        height: calc(var(--height) - var(--border-width) * 2);
        left: var(--border-width);

        background: white;
        transition: 0.3s;
    }
}

.input_with_unit {
    > span {
        font-size: small;
        display: inline-block;
        width: var(--unit-size);
        position: relative;
        color: var(--color-input-text);

        &:empty {
            display: none;
        }
    }

    > input {
        text-align: right;
        outline-offset: 1px;
        width: calc(100% - var(--unit-size));
    }

    /* if span at the end */
    > input:has(+ span) {
        padding-right: var(--unit-size);
    }
    > input + span {
        margin-left: calc(-1 * var(--unit-size));
        text-align: left;
    }

    /* if span at the beginning */
    > span:has(+ input) {
        margin-right: calc(-1 * var(--unit-size));
        text-align: right;
    }
    > span + input {
        padding-left: var(--unit-size);
    }

    /* if input sandwiched between two spans */
    > span + input:has(+ span) {
        width: calc(100% - 2 * var(--unit-size));
    }

    /* TODO make that work with 2 spans */
    &:has(> span:empty) > input {
        padding: 0;
        width: 100%;
    }

    &:has(> input:disabled) > span {
        color: grey;
    }

    &:has(> .hidden_input){
        &, > * {
            border: none;
            background: transparent;
            color: inherit;
        }
    }
}

input.hidden_input {
    padding: 0;
}

#stats_wrapper .input_with_unit {
    > input {
        height: 16px;
        font: inherit;
    }
    &:has(> input:disabled) > * {
        color: inherit;
    }
    > ::placeholder{
        color: var(--color-text);
    }
}

#mod-dialog > form {
    overflow: auto;
}

#mod-dialog table > thead {
    background-color: var(--color-TR-header);
}

#enemy_wrapper {
    border: var(--border-style);
    border-radius: 15px;
    overflow-y: auto;
    scrollbar-gutter: stable;
    box-shadow: var(--box-shadow);
    background-color: var(--color-background);

    & tr:nth-child(even) {
        background-color: var(--color-TR-even);
    }

    & thead > tr {
        position: sticky;
        background-color: var(--color-TR-header);
        top: 0;
        z-index: 1;
    }

    & tfoot > tr:last-child {
        > * {
            z-index: 1;
            position: sticky;
            bottom: 0;
        }

        > :is(td, th) {
            background-color: var(--color-borders);
        }
    }
}

#add-enemy > button {
    padding: 0px 10px;
    margin: 5px;
    margin-left: 50px;
    font-size: larger;
}

.TTK_mean, .TTK_std {
    text-align: right;
}

.pen-button {
    color: inherit;
    cursor: pointer;
    padding: 0;
    border: none;
    background-color: transparent;
    font-size: 20px;
    line-height: 1;
}

.pen-button:hover {
    color: var(--color-hovered);
    text-shadow: 0px 0px 5px white;
}

#stance_edit_dialog {
    background-color: var(--color-background);
    padding-right: 0;
}

#stance_wrapper {
    max-height: 80lvh;
    overflow-y: auto;
    scrollbar-gutter: stable;
}

#hits_table {
    border-spacing: 3px 15px;
    margin-top: -20px; /* slightly more than the vertical border spacing because i want to */
    text-align: center;

    > tfoot > tr:last-child > * {
        z-index: 1;
        position: sticky;
        bottom: 0;
        background-color: var(--color-background);
    }
    > thead > tr:first-child > * {
        z-index: 1;
        position: sticky;
        top: 0;
        background-color: inherit;
    }
}

#hits_wrapper {
    background-color: var(--color-hits-background);
}

.containerAddStat {
    text-align: center;
}

a.modebar-btn {
    font-size: 30px;
}

#grid {
    margin: auto;
    width: fit-content;

    display: grid;
    grid-template-columns: max-content max-content max-content;
    grid-template-rows: max-content max-content 1fr;
    gap: 10px 10px;
    grid-auto-flow: column;
    justify-content: start;
    justify-items: start;
    grid-template-areas:
        "stats_wrapper modding modding"
        "stats_wrapper plot mod-list"
        "other plot mod-list";
}

#loading_spinner {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    width: 50px;
    height: 50px;
    margin: -25px 0 0 -25px;
    border: 8px solid rgba(0, 0, 0, 0.1);
    border-left-color: #3498db;
    border-radius: 50%;
    z-index: 99;
    animation: spin 1s linear infinite;
}
@keyframes spin {
    to { transform: rotate(360deg); }
}

#other {
    grid-area: other;
    width: 100%;
    align-self: stretch;
    box-shadow: none;
    background-color: transparent;

    display: grid;
    grid-auto-flow: column dense;
    grid-template-columns: 1fr max-content;
    grid-template-rows: 1fr max-content;
    gap: 10px;

    > * {
        background-color: var(--color-background);
    }

    > #other-buttons {
        background-color: transparent;
    }
}

#modding {
    grid-area: modding;

    display: grid;
    grid-auto-columns: var(--mod-width);
    grid-auto-flow: row;

    gap: var(--mod-gap);
    width: fit-content;
    border: var(--border-style);
    padding: 10px;
}
#arcane1 { grid-column: 5; grid-row: 2; }
#arcane2 { grid-column: 5; grid-row: 3; }
#buffs_wrapper { grid-column: 3 / span 3; grid-row: 1; }

#mod-list-wrapper{
    grid-area: mod-list;
    border: var(--border-style);
    width: fit-content;
    padding: 10px;
}

#mod-list {
    --mod_count_x: 2;
    display: grid;
    gap: var(--mod-gap);
    grid-auto-flow: column;
    grid-template-rows: 1fr 1fr 1fr;
    justify-content: start;

    margin-top: 10px;
    overflow-x: scroll;
    scroll-snap-type: x mandatory;
    width: calc(var(--mod_count_x) * var(--mod-width) + (var(--mod_count_x) - 1) * 2 * var(--mod-margin-horizontal));
    /* 3 mods + 2 gaps + 6 borders = 3*240 + 2*10 + 6*2 = 752 */
    /* height: calc(var(--mod_count_y) * var(--mod-height) + (var(--mod_count_y) - 1) * 2 * var(--mod-margin-vertical) + 17px); /* scrollbar = 17px */
    /* 3*120 + 2*2*8 + 3*2 * 2px = 409px */
    height: max-content;

    /* TODO darkmode
        scrollbar-color: blue red; */
}

#plot {
    grid-area: plot;
    /* MODDING = (5 * var(--mod-width) + (5 - 1) * 2 * var(--mod-margin-horizontal) + 2*10px) */
    /* MODLIST = (2 * var(--mod-width) + (2 - 1) * 2 * var(--mod-margin-horizontal) + 2*10px) */
    width: calc(3 * var(--mod-width) + (4 - 1) * 2 * var(--mod-margin-horizontal) - 10px /* grid gap */ - 2*2px /* plot's own border */);

    /* height: 465px; */
    border: var(--border-style);
    background: #ccc;

    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;

    &:empty{
        background: var(--color-plot-background);

        &::before{
            content: "📊";
            font-size: 64px;
        }
        &::after {
            content: "select weapon/enemy/mods and simulate";
            position: absolute;
            font-size: 36px;
            color: grey;
            transform: translateY(calc(-50% - 50px));
            width: 95%;
            text-align: center;
        }
    }
}

#stats_wrapper {
    grid-area: stats_wrapper;
    width: 575px;
    /* max-content + some space for the graph ticks*/
    border: var(--border-style);
    position: relative;
    left: 0%;
}

.stats_damage_table {
    position: relative;
}

.stats_damage_table tr:nth-child(even) {
    background-color: var(--color-TR-even);
}

#stats_wrapper th {
    font-weight: normal;
}

#stats_wrapper thead th {
    position: sticky;
    background-color: var(--color-background);
    top: 0;
    z-index: 1;
    font-weight: normal;
}

/*
#stats_wrapper tfoot tr:nth-child(even) {
    position: sticky;
    background-color: var(--color-TR-header);
    bottom: 0;
    z-index: 1;
    background-color: red;
}
*/

.separate > * {
    padding-top: 15px;
}

tr.indented {
    > td:first-of-type {
        padding-left: 1em;
        color: var(--color-indented);

        &::after{
            content:"├";
            position: absolute;
            left: 0;
            font-size: larger;
        }
    }

    &:has(+ tr:not(.indented)),
    &:last-child {
        > td:first-of-type {
            &::after{
                content:"└";
            }
        }
    }
}

div.tooltip {
    color: var(--color-tooltip);
    display: inline-block;

    &::before {
        content: "🛈";
    }
}

td.tooltip {
    background-color: var(--color-background);
    padding: 0;
}

.tooltip .tooltiptext {
    visibility: hidden;
    background: var(--color-tooltip-background);
    color: var(--color-tooltip-text);
    text-align: left;
    border-radius: 3px;
    padding: 5px;

    word-break: break-word;

    transform: translate(10px, -5px); /* 5px = padding */
    position: absolute;
    z-index: 1;
}

.tooltip > .tooltiptable {
    visibility: hidden;
    background: var(--color-tooltip-background);
    color: var(--color-tooltip-text);
    text-align: left;
    border-radius: 3px;
    padding: 5px;

    transform: translate(24px, -50%);
    position: absolute;
    z-index: 1;
    width: max-content;
}

.tooltiptable th{
    width: 6.5rem;
}
.tooltiptable td{
    width: 6ch;
}

.tooltip:hover * {
    visibility: visible;
}

#stats_wrapper td:nth-child(2):not(table td td),
#stats_wrapper td:nth-child(3):not(table td td) {
    text-align: right;
}

.mod_buff, .less_is_more.mod_nerf {
    color: var(--color-modbuff);
}
.mod_nerf, .less_is_more.mod_buff {
    color: var(--color-modnerf);
}

.row_hide {
    display: none;
}

.row_show {
    display: table-row;
}

.graph_bar {
    height: 18px;
    width: 0%;
    white-space: nowrap;

    /*
    border-color: white;
    border-width: 1px;
    border-style: solid;
    border-left: none;
    border-right: none;
    */
}

.axis {
    position: absolute;
    top: 0;
    bottom: 0;
}

.tick {
    position: absolute;
    bottom: 15px;
    top: 0;
    border-right: 1px solid rgba(0, 0, 0, 0.15);
    font-size: 12px;
}

.tick::after {
    content: attr(data-value);
    position: absolute;
    left: 50%;
    transform: translate(-50%, 15px);
    bottom: 0;
}

/* All cells are fixed to the mod size */
.cell {
    width: var(--mod-width);
    height: var(--mod-height);
    border: 2px solid var(--metal-color);
    border-radius: 10px;
    background-color: var(--color-mod-background);
    position: relative;
    overflow: hidden;
    box-sizing: border-box;
    cursor: pointer;
    box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.2);

    scroll-snap-align: start;
    scroll-snap-stop: always;

    /* FIXME no rounded borders anymore :c
    border-image: linear-gradient(
        135deg,
        color-mix(in srgb, var(--metal-color) 100%, white 40%),
        var(--metal-color),
        color-mix(in srgb, var(--metal-color) 100%, black 40%)
    ) 1;
    */
}

/* Empty mod and buff slots show dashed border with "Empty" */
.cell:empty {
    background: none;
    border: 2px dashed var(--color-borders);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: default;
    box-shadow: none;
}
.cell:empty::after {
    content: "+";
    position: absolute;
    font-size: 28px;
    color: var(--color-mod-empty-background);
    /* pointer-events: none; */
}

.cell.special-slot:empty::after {
    content: attr(data-slot_type);
    /* font-size: 18px; */
}

.cell.special-slot:empty::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    background-position: center;
    background-repeat: no-repeat;
    background-color: rgba(0, 0, 0, 0.05);
}
.cell.special-slot[data-slot_type="arcane"]:empty {
    &::after {
        content: "";
    }
    &::before {
        /* background-image: url("https://wiki.warframe.com/images/CosmeticEnhancer.png?6d4d8"); */
        background-image: url("https://browse.wf/Lotus/Interface/Icons/GenericCosmeticEnhancerIcon.png");
        background-size: 55%;
        filter: var(--mod-empty-background-filter);

    }
}
.cell.special-slot[data-slot_type="exilus"]:empty {
    &::after {
        content: "";
    }
    &::before {
        background-image: url("https://static.overframe.gg/static/images/icon-exilus.png");
        background-size: 55%;
        filter: var(--mod-empty-background-filter);
    }
}

#buffs_wrapper > .cell:empty {
    &::after {
        content: "buff";
        /* font-size: 18px; */
    }
    /*
    &::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;

        background-position: center;
        background-repeat: no-repeat;
        background-color: rgba(0, 0, 0, 0.05);

        background-image: url("https://browse.wf/Lotus/Interface/Icons/MarketBundleUpgradeIcon.png");
        background-size: 55%;
        filter: var(--mod-empty-background-filter);
    }
    */
}

/* Stance slot styling */
#stance-slot {
    /* grid-area: stance; */
    background: none;
    box-shadow: none;

    display: flex;
    align-items: center;
    justify-content: center;
    height: var(--mod-height);
    width: var(--mod-width);
    padding: 5px;

    #stance_name{
        width: 90%;
    }
}

/* Scrollable buffs_wrapper container with calculated width */
#buffs_wrapper {
    /* width: calc(var(--buff-count) * var(--mod-width) + (var(--buff-count) - 1) * 2 * var(--mod-margin-horizontal)); */
    overflow-x: scroll;
    scroll-snap-type: x mandatory;
    display: flex;
    gap: var(--mod-gap);
}

#grid:has(#weapon_type option:not([value="melee"]):checked) > #modding {
    #stance-slot {
        display: none;
    }
    #buffs_wrapper {
        grid-column: span 4;
    }
}

/* Buff slots inherit the same fixed cell size */
.buff-slot {
    flex: 0 0 auto;
}

/* Mod inner structure */
.mod-name {
    /* background: #ddd; */
    font-weight: bold;
    min-height: 30px;
    text-align: center;
    align-content: center;
}
.remove {
    position: absolute;
    top: 5px;
    right: 5px;
    width: 18px;
    height: 18px;
    line-height: 18px;
    font-size: 12px;
    cursor: pointer;
    color: white;
    background: rgba(226,74,74,0.6);
    /* border-radius: 50%; */
    display: none;
}
#modding .mod-name:hover .remove { display: block; }
.remove:hover { background: rgba(226,74,74,0.8); }
.cell.dragging { opacity: 0.5; }

/* Mod cell stats table */
.mod-stats {
    width: 100%;
    /* height: calc(100% - 30px); */
    /* overflow-y: auto; */
    border-collapse: collapse;
    text-wrap: nowrap;
}
.mod-stats td {
    /* border: 1px solid #ddd; */
    padding: 2px 4px;
    font-size: 12px;
}

.d-none {
    display: none;
}

#stats-tbody input[type="checkbox"]{
    margin: 0;
}

select[name="buff"] {
    max-width: 170px;
}

select[name="condition"] {
    max-width: 130px;
}

/* TODO better colors with unified contrast */
.mod-rarity-common {
    --metal-color: #a67c68;
}
.mod-rarity-uncommon {
    --metal-color: silver;
}
.mod-rarity-rare {
    --metal-color: gold;
}
.mod-rarity-legendary {
    --metal-color: lightblue;
}
.mod-rarity-archon {
    --metal-color: orange;
}
.mod-rarity-galvanized {
    --metal-color: slategray;
}
.mod-rarity-riven {
    --metal-color: darkorchid;
}
.mod-rarity-amalgam {
    --metal-color: peachpuff;
}

.damage-glyph {
    font-size: small;
    height:15px;
    width:15px;
    margin: -1px;
}

.button-stylized {
    font-size: small;
    font-family: inherit;
    background: var(--color-input-background);
    color: var(--color-text);
    border: 1px solid transparent;
    border-bottom: 3px solid color-mix(in srgb, var(--color-text) 40%, black);
    padding: 0 0.5rem;
    min-height: 2rem;
    min-width: 1.5rem;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    vertical-align: middle;

    &:hover {
        border: 1px solid color-mix(in srgb, var(--color-hovered) 30%, black);
        border-bottom: 3px solid var(--color-hovered);
        color: var(--color-hovered);
        background: radial-gradient(
            ellipse at bottom center,
            color-mix(in srgb, var(--color-hovered) 30%, var(--color-input-background)),
            var(--color-input-background) 70%
        );
    }
}

#editEnemyTable {
    margin-top: 1rem;
    border-spacing: 0;

    th {
        width: 4.5rem;
    }
}

.pulse {
    animation: pulse 1.2s infinite;
    --color-pulse: rgb(246, 143, 133);
}
@keyframes pulse {
    0%   { box-shadow: 0 0 0 0 var(--color-pulse); }
    70%  { box-shadow: 0 0 0 10px transparent; }
    100% { box-shadow: 0 0 0 0 transparent; }
}

#enemy_wrapper{
    > table {
        > thead > tr > th{
            &:nth-child(1) { width: 18px; }
            /* &:nth-child(2) { width: 230px; } */
            &:nth-child(3) { width: 50px; }
            &:nth-child(4) { width: 50px; }
        }
    }
}

#stats_wrapper{
    > table {
        > thead > tr > th{
            &:nth-child(1) { width: 100px; background: inherit }
            &:nth-child(2) { width: 65px; }
            &:nth-child(3) { width: 65px; }
            &:nth-child(4) { width: 40px; background: inherit }
        }
    }
}

#weapon_selection{
    position: absolute;
    z-index: 1;
    left: 300px;
    top: 25px;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    border-left: var(--border-style);
    border-radius: 15px;

    #weapon_name_input{
        width: 14rem;
        font-size: large;
        font-weight: bold;
        margin: 20px;
        margin-bottom: 0;
    }

    > div {
        display: flex;
        justify-content: space-evenly;
        flex-direction: column;
        height: 150px;
        width: fit-content;
    }
}